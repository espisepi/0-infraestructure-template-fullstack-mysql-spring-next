


1) Error:  Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception with message: Cannot load driver class: org.h2.Driver
1) Solucion: Faltaba añadir la dependencia de h2 en el pom.xml (https://stackoverflow.com/questions/54230137/cannot-load-driver-class-org-h2-driver-in-spring-boot-application)
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>


2) Error: No podemos ejecutar el proyecto
2) Solucion: 
    - Ejecutar la opcion "maven install"
    - IMPORTANTE: Ejecutar el proyecto seleccionando "Run as" -> "Java Application" en la CLASE PRINCIPAL DEL PROYECTO SPRING BOOT AKA la que lleva la anotacion @SpringBootApplication

3) Error y Solucion:  para solucionar los errores de los imports con nombres deprecados con javax -> jakarta

4) Error: NoSuchBeanException en el mapper ProductModelToProductDTOMapper
4) Solucion: Para solucionarlo añadir en la interface el @Mapper y el @Component para indicar que es un bean (alomejor esto ultimo del @component no hace falta). Y en el pom.xml añadir tanto la dependencia <dependency> como el apartado de plugin <plugin> de mapstruct (buscarlo en google). Y tener la <dependency> de lombok añadida tambien.
	- https://stackoverflow.com/questions/47109827/mapstruct-mapper-annotation-dont-create-bean
	- https://www.baeldung.com/mapstruct
	- https://auth0.com/blog/how-to-automatically-map-jpa-entities-into-dtos-in-spring-boot-using-mapstruct/#Aside--Securing-Spring-APIs-with-Auth0
	- Para mapear Page https://stackoverflow.com/questions/48867377/is-there-a-auto-mapping-for-spring-pageable-sort-with-mapstruct

5) Error: Todas las palabras reservadas en Java fallan
5 Solucion: En pom.xml se definio el <plugin> de mapStruct con java 1.8 cuando se utilizaba java 10 en el proyecto. Eso provocaba incompatibilidad. Se ha solucionado indicando en el <plugin> del pom.xml que la version de java es la 10.

6) Error: El convertidor falla y devuelve todos los atributos del DTO en null
6) Solucion: el fallo era porque no estaba instalado lombok en el eclipse (a parte de tener que añadirlo en el pom.xml). y por lo tanto no se generaban los metodos getter y setter y el convertidor convertia sin ningun atributo porque no existia ningun metodo getter y setter para los atributos.
6) Solucion 2: Si la solucion anterior no funciona, inspeccionar la implementacion de la clase que realiza MapStruct sobre nuesta interface mapper entre dos POJOs(Ej: ProductModel y ProductDTO).

7) Error: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long';
7) Solucion: Estaba haciendo una llamada GET en vez de POST en el postman.

8) Error Unauthorized POSTMAN: "error": "unauthorized",
    "error_description": "Full authentication is required to access this resource"
8) Solucion:
	8.1) Asegurarse de que en ResourceServerConfig.java estan definidos los enlaces permitidos tanto para GET, POST, UPDATE, DELETE, con el metodo antMatchers. (Aqui tenia yo el problema, que no defini como permitAll los metodos POST ni DELETE ni PUT, solamente los puse GET)
	8.2) Asegurarse de que en postman esta bien añadido el token con la palabra Bearer y esas mierdas.

9) Error: No se inserta la relacion de product categories bidireccional en el base de datos, y tampoco se mapea la relacion correctamente :(
9) Solucion: No se insertaba en la base de datos porque en el model de la clase java (ProductCategoryModel) no puse atributos que utilizaba en el import.sql al añadir valores a esa tabla (concretamente el atributo created_at no estaba definido en la clase java y lo utilizaba en el sql para añadir un productCategory, y como no existia ese atributo en la tabla no se añádia nunca)
 
 10) Error: ProductCategoryModel to ProductCategoryDTO no se mapeaban con mapStruct sus atributos
 10) Solucion: Eliminar las anotaciones @Getter y @Setter de lombok en ProductCategoryDTO y escribir los getter y setter en la clas ProductCategoryDTO. Con eso ya funcionaba el mapeo.

===================== BIBLIOGRAFIA INTERESANTE =========================

- Relaciones unidireccionales vs bidireccionales : https://www.arquitecturajava.com/java-relaciones-unidireccionales-o-bidireccionales/

- generic CRUD (usado en el proyecto) : https://github.com/IllusiveNetworks-Labs/spring-generic-crud/tree/master/src/main/java/illusive/networks

- generic CRUD 2 (usado en el proyecto) : https://github.com/leonardombr/Generic-CRUD-Spring-Boot/tree/master/src/main/java/com/crud/generic

=========================== AUTENTICACION POSTMAN ==================

1 - Ruta -> POST localhost:8080/oauth/token
2 - Body -> x-www-form-urlencoded
	2.1 - username / andres
	2.2 - password / 12345
	2.3 - grant_type / password
3 - Authorization -> Basic Auth (Estos parametros se configuran en AuthorizationServerConfig.java - Line 36 clients.inMemory().withClient("angularapp").secret(passwordEncoder.encode("12345")).scopes("read", "write")....)
	3.1 - username / angularapp
	3.2 - password / 12345
4 - Authorization -> Pulsar en el boton "Preview Request"
5 - Headers -> Aparecerá un nuevo campo gracias al pulsar el boton del paso anterior
	5.1 - Nuevo campo: Authorization / Basic YW5nd....
Resumen: Tenemos que conseguir añadir en el Header el paso 5 y en el Body el paso 2
6- Le damos al boton de "Send" y el servidor nos devolvera el token.
7- Ya tenemos el token! :)


=========================== Peticion con Token POSTMAN ==================

1 - Ruta (protegida con token) -> GET localhost:8080/api/clientes/1
2 - Authorization -> Bearer Token
	2.1 - Token / eyJhb... (pegamos el token que obtuvimos en el apartado anterior "AUTENTICACION POSTMAN")
3 - Authorization -> Pulsar en el boton "Preview Request"
4 - Headers -> Aparecerá un nuevo campo gracias al pulsar el boton del paso anterior
	4.1 - Nuevo campo: Authorization / Bearer eyJhb....(token obtenido en el paso anterior)
5 - Le damos al boton de "Send" y el servidor nos devolvera el token.


================= UPLOAD FILE POSTMAN ===============================

- en application.properties se puede indicar el tamaño maximo del archivo de subida !!!
	-- spring.servlet.multipart.max-file-size=10MB
	-- spring.servlet.multipart.max-request-size=10MB

1 - Ruta -> POST localhost:8080/api/clientes/upload
2- Body -> form-data
	2.1 - "archivo" KEY - Seleccionar tipo File - Pulsamos en el boton "Elegir archivos" y lo elegimos
	2.2 - El nombre "archivo" lo elegimos en el controlador en la linea "@RequestParam("archivo") MultiparFile archivo"
	2.3 - id key / 1 (el id del cliente al que le asociamos la imagen, cosas de la implementacion del proyecto)


============= VER IMAGEN ===============

1 - Ponemos en el navegador: endpoint para ver imagen (localhost:8080/api/uploads/img/{nombreFoto:.+}) y el src de la imagen que lo vemos en postman