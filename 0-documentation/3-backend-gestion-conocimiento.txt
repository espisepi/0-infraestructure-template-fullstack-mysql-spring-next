


1) Error:  Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception with message: Cannot load driver class: org.h2.Driver
1) Solucion: Faltaba añadir la dependencia de h2 en el pom.xml (https://stackoverflow.com/questions/54230137/cannot-load-driver-class-org-h2-driver-in-spring-boot-application)
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>


2) Error: No podemos ejecutar el proyecto
2) Solucion: 
    - Ejecutar la opcion "maven install"
    - IMPORTANTE: Ejecutar el proyecto seleccionando "Run as" -> "Java Application" en la CLASE PRINCIPAL DEL PROYECTO SPRING BOOT AKA la que lleva la anotacion @SpringBootApplication

3) Error y Solucion:  para solucionar los errores de los imports con nombres deprecados con javax -> jakarta


=========================== AUTENTICACION POSTMAN ==================

1 - Ruta -> POST localhost:8080/oauth/token
2 - Body -> x-www-form-urlencoded
	2.1 - username / andres
	2.2 - password / 12345
	2.3 - grant_type / password
3 - Authorization -> Basic Auth (Estos parametros se configuran en AuthorizationServerConfig.java - Line 36 clients.inMemory().withClient("angularapp").secret(passwordEncoder.encode("12345")).scopes("read", "write")....)
	3.1 - username / angularapp
	3.2 - password / 12345
4 - Authorization -> Pulsar en el boton "Preview Request"
5 - Headers -> Aparecerá un nuevo campo gracias al pulsar el boton del paso anterior
	5.1 - Nuevo campo: Authorization / Basic YW5nd....
Resumen: Tenemos que conseguir añadir en el Header el paso 5 y en el Body el paso 2
6- Le damos al boton de "Send" y el servidor nos devolvera el token.
7- Ya tenemos el token! :)


=========================== Peticion con Token POSTMAN ==================

1 - Ruta (protegida con token) -> GET localhost:8080/api/clientes/1
2 - Authorization -> Bearer Token
	2.1 - Token / eyJhb... (pegamos el token que obtuvimos en el apartado anterior "AUTENTICACION POSTMAN")
3 - Authorization -> Pulsar en el boton "Preview Request"
4 - Headers -> Aparecerá un nuevo campo gracias al pulsar el boton del paso anterior
	4.1 - Nuevo campo: Authorization / Bearer eyJhb....(token obtenido en el paso anterior)
5 - Le damos al boton de "Send" y el servidor nos devolvera el token.


================= UPLOAD FILE POSTMAN ===============================

- en application.properties se puede indicar el tamaño maximo del archivo de subida !!!
	-- spring.servlet.multipart.max-file-size=10MB
	-- spring.servlet.multipart.max-request-size=10MB

1 - Ruta -> POST localhost:8080/api/clientes/upload
2- Body -> form-data
	2.1 - "archivo" KEY - Seleccionar tipo File - Pulsamos en el boton "Elegir archivos" y lo elegimos
	2.2 - El nombre "archivo" lo elegimos en el controlador en la linea "@RequestParam("archivo") MultiparFile archivo"
	2.3 - id key / 1 (el id del cliente al que le asociamos la imagen, cosas de la implementacion del proyecto)


============= VER IMAGEN ===============

1 - Ponemos en el navegador: endpoint para ver imagen (localhost:8080/api/uploads/img/{nombreFoto:.+}) y el src de la imagen que lo vemos en postman